import java.util.*;
import java.io.*;

class FIFO
{
    void fifo()
    {
        Scanner sc = new Scanner(System.in);
        int len;
        System.out.println("Enter length of reference string: ");
        len = sc.nextInt();
        int[] incomingStream = new int[len];
        System.out.println("Enter reference string :");
        for(int i=0;i<len;i++){
            incomingStream[i] = sc.nextInt();
        }
        int pageFaults = 0;
        System.out.println("Enter no. of frames: ");
        int frames = sc.nextInt();
        int m, n, s, pages;

        pages = incomingStream.length;

        System.out.println("Incoming \t Frame 1 \t Frame 2 \t Frame 3");
        int[] temp = new int[frames];
        for(m = 0; m < frames; m++)
        {
            temp[m] = -1;
        }

        for(m = 0; m < pages; m++)
        {
            s = 0;

            for(n = 0; n < frames; n++)
            {
                if(incomingStream[m] == temp[n])
                {
                    s++;
                    pageFaults--;
                }
            }
            pageFaults++;

            if((pageFaults <= frames) && (s == 0))
            {
                temp[m] = incomingStream[m];
            }
            else if(s == 0)
            {
                temp[(pageFaults - 1) % frames] = incomingStream[m];
            }

            System.out.println();
            System.out.print(incomingStream[m] + "\t\t\t");
            for(n = 0; n < frames; n++)
            {
                if(temp[n] != -1)
                    System.out.print(temp[n] + "\t\t\t");
                else
                    System.out.print(" - \t\t\t");
            }
        }

        System.out.println("\nTotal Page Faults:\t" + pageFaults);
        System.out.println("\nTotal Page Hits:\t" + (len-pageFaults));
    }
}
class optimal 
{
    static boolean search(int key, int[] fr)
    {
        for (int i = 0; i < fr.length; i++)
            if (fr[i] == key)
                return true;
        return false;
    }

    static int predict(int[] pg, int[] fr, int pn,
                       int index)
    {
        int res = -1, farthest = index;
        for (int i = 0; i < fr.length; i++) {
            int j;
            for (j = index; j < pn; j++) {
                if (fr[i] == pg[j]) {
                    if (j > farthest) {
                        farthest = j;
                        res = i;
                    }
                    break;
                }
            }
            if (j == pn)
                return i;
        }
        return (res == -1) ? 0 : res;
    }
    void optimalPage(int pg[], int pn, int fn)
    {
        int[] fr = new int[fn];
        int hit = 0;
        int index = 0;
        for (int i = 0; i < pn; i++) {
            if (search(pg[i], fr)) {
                hit++;
                continue;
            }
            if (index < fn)
                fr[index++] = pg[i];
            else {
                int j = predict(pg, fr, pn, i + 1);
                fr[j] = pg[i];
            }
        }
        System.out.println("No. of faults = " + hit);
        System.out.println("No. of misses = " + (pn - hit));
    }
}
public class FIFO_Optimal {
    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        System.out.println(" \n1.Optimal \n2.FIFO \nEnter your choice");
        int ch = s.nextInt();
        switch (ch) {
            case 1:
                int pn,fn;
                System.out.println("Enter number of pages : ");
                pn=s.nextInt();
                System.out.println("Enter number of frames : ");
                fn=s.nextInt();
                int pg[]=new int[pn];
                System.out.println("Enter reference string : ");
                for(int i=0;i<pn;i++)
                {
                    pg[i]=s.nextInt();
                }
                new optimal().optimalPage(pg,pn,fn);
                break;
            case 2:
                new FIFO().fifo();
                break;
            default:
                System.out.println("Wrong choice");
        }
        s.close();
    }
}
