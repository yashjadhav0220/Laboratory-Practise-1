import java.util.*;
class RR{
    private static Scanner inp = new Scanner(System.in);
    void roundrobin(){
        int n,tq, timer = 0, maxProccessIndex = 0;
        float avgWait = 0, avgTT = 0;
        System.out.print("\nEnter the time quanta : ");
        tq = inp.nextInt();
        System.out.print("\nEnter the number of processes : ");
        n = inp.nextInt();
        int arrival[] = new int[n];
        int burst[] = new int[n];
        int wait[] = new int[n];
        int turn[] = new int[n];
        int queue[] = new int[n];
        int temp_burst[] = new int[n];
        boolean complete[] = new boolean[n];
 
        System.out.print("\nEnter the arrival time of the processes : ");
        for(int i = 0; i < n; i++)
            arrival[i] = inp.nextInt();
 
        System.out.print("\nEnter the burst time of the processes : ");
        for(int i = 0; i < n; i++){
            burst[i] = inp.nextInt();
            temp_burst[i] = burst[i];
        }
 
        for(int i = 0; i < n; i++){    
            complete[i] = false;
            queue[i] = 0;
        }
        while(timer < arrival[0])    
            timer++;
        queue[0] = 1;
         
        while(true){
            boolean flag = true;
            for(int i = 0; i < n; i++){
                if(temp_burst[i] != 0){
                    flag = false;
                    break;
                }
            }
            if(flag)
                break;
 
            for(int i = 0; (i < n) && (queue[i] != 0); i++){
                int ctr = 0;
                while((ctr < tq) && (temp_burst[queue[0]-1] > 0)){
                    temp_burst[queue[0]-1] -= 1;
                    timer += 1;
                    ctr++;
 
                   
                    checkNewArrival(timer, arrival, n, maxProccessIndex, queue);
                }
                if((temp_burst[queue[0]-1] == 0) && (complete[queue[0]-1] == false)){
                    turn[queue[0]-1] = timer;        
                    complete[queue[0]-1] = true;
                }
                 
                 
                boolean idle = true;
                if(queue[n-1] == 0){
                    for(int k = 0; k < n && queue[k] != 0; k++){
                        if(complete[queue[k]-1] == false){
                            idle = false;
                        }
                    }
                }
                else
                    idle = false;
 
                if(idle){
                    timer++;
                    checkNewArrival(timer, arrival, n, maxProccessIndex, queue);
                }
               
                queueMaintainence(queue,n);
            }
        }
 
        for(int i = 0; i < n; i++){
            turn[i] = turn[i] - arrival[i];
            wait[i] = turn[i] - burst[i];
        }
 
        System.out.print("\nProgram No.\tArrival Time\tBurst Time\tWait Time\tTurnAround Time"
                         + "\n");
        for(int i = 0; i < n; i++){
            System.out.print(i+1+"\t\t"+arrival[i]+"\t\t"+burst[i]
                             +"\t\t"+wait[i]+"\t\t"+turn[i]+ "\n");
        }
        for(int i =0; i< n; i++){
            avgWait += wait[i];
            avgTT += turn[i];
        }
        System.out.print("\nAverage wait time : "+(avgWait/n)
                         +"\nAverage Turn Around Time : "+(avgTT/n));
    }
    public static void queueUpdation(int queue[],int timer,int arrival[],int n, int maxProccessIndex){
        int zeroIndex = -1;
        for(int i = 0; i < n; i++){
            if(queue[i] == 0){
                zeroIndex = i;
                break;
            }
        }
        if(zeroIndex == -1)
            return;
        queue[zeroIndex] = maxProccessIndex + 1;
    }
 
    public static void checkNewArrival(int timer, int arrival[], int n, int maxProccessIndex,int queue[]){
        if(timer <= arrival[n-1]){
            boolean newArrival = false;
            for(int j = (maxProccessIndex+1); j < n; j++){
                if(arrival[j] <= timer){
                    if(maxProccessIndex < j){
                        maxProccessIndex = j;
                        newArrival = true;
                    }
                }
            }
            if(newArrival)    
                queueUpdation(queue,timer,arrival,n, maxProccessIndex);       
        }
    }
   
    public static void queueMaintainence(int queue[], int n){
 
        for(int i = 0; (i < n-1) && (queue[i+1] != 0) ; i++){
            int temp = queue[i];
            queue[i] = queue[i+1];
            queue[i+1] = temp;
        }
    }
}
class Main {
 
    void main_meth() {
    Scanner s = new Scanner(System.in);
    int x,n,p[],pp[],bt[],w[],t[],ft[],awt,atat,i;
    System.out.print("Enter the number of process : ");
    n = s.nextInt();
    p = new int[n];
    pp = new int[n];
    bt = new int[n];
    w = new int[n];
    t = new int[n];
    ft=new int[n];
    //n is number of process
    //p is process
    //pp is process priority
    //bt is process burst time
    //w is wait time
    // t is turnaround time
    //awt is average waiting time
    //atat is average turnaround time
    
    System.out.print("\n\t Enter burst time : time priorities \n");
    for(i=0;i<n;i++)
    {
    System.out.print("\nProcess["+(i+1)+"]:");
    bt[i] = s.nextInt();
    pp[i] = s.nextInt();
    p[i]=i+1;
    }
   //sorting on the basis of priority
    for(i=0;i<n-1;i++)
    {
    for(int j=i+1;j<n;j++)
    {
    if(pp[i]<pp[j])
    {
    x=pp[i];
    pp[i]=pp[j];
    pp[j]=x;
    x=bt[i];
    bt[i]=bt[j];
    bt[j]=x;
    x=p[i];
    p[i]=p[j];
    p[j]=x;
    }
    }
   }
   w[0]=0;
   awt=0;
   t[0]=bt[0];
   ft[0]=bt[0];
   atat=t[0];
   for(i=1;i<n;i++)
   {
   ft[i]=ft[i-1]+bt[i];
   w[i]=ft[i-1];
    // w[i]=t[i-1];
    awt+=w[i];
    t[i]=w[i]+bt[i];
    atat+=t[i];
   }
   //Displaying the process
    System.out.print("\n\nProcess \t Burst Time \t Wait Time \t Turn Around Time Priority \n");
   for(i=0;i<n;i++)
    System.out.print("\n "+p[i]+"\t\t "+bt[i]+"\t\t "+w[i]+"\t\t "+t[i]+"\t\t "+pp[i]+"\n");
   awt/=n;
   atat/=n;
    System.out.print("\n Average Wait Time : "+awt);
    System.out.print("\n Average Turn Around Time : "+atat);
    }
   }
public class Combine {
    public static void main(String[] args) {
        int ch;
        Scanner sc=new Scanner(System.in);
        System.out.println("1.Prio\n2.RoundRobin\n3.Exit");
        System.out.println("Enter choice : ");
        ch=sc.nextInt();
        switch (ch) {
            case 1:
                new Main().main_meth();  

                break;
            case 2:
                new RR().roundrobin();
            default:
                break;
        }
        sc.close();
    }
    
}